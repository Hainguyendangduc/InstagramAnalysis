# -*- coding: utf-8 -*-
"""covid_caption_13/9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N99AyiMfDKlpGQ_0VzEb_nt8kL2KXTz4
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

df = pd.read_csv('/content/drive/MyDrive/data/caption.csv')

len(df)

df

new_columns = ['shortCode','year', 'caption', 'hashtags']
df = df[new_columns]

df

df['caption'].iloc[26123]

df['caption'].iloc[2505]

import gensim.downloader

glove_vectors = gensim.downloader.load('fasttext-wiki-news-subwords-300')

!pip install gensim

import gensim.downloader as api
word_vectors = api.load("glove-wiki-gigaword-100")  # load pre-trained word-vectors from gensim-data

sentence = "coronavirus"
word = "epidemic"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "boy"
word = "men"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "girl"
word = "women"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "eraser"
word = "pencil"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "hospital"
word = "c"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "pandemic"
word = "headache"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "glass"
word = ""

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")



sentence = "math"
word = "subject"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "flower"
word = "desk"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "erase"
word = "note"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "hat"
word = "sneaker"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "desk"
word = "monitor"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "tree"
word = "chair"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "famer"
word = "singer"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "worker"
word = "horse"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "milk"
word = "latte"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "glass"
word = "latte"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "glass"
word = "monitor"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "sweat"
word = "sneaker"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = "nose"
word = "flu"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

sentence = ""
word = "science"

# Chuyển câu và từ vào không gian vector
sentence_vector = word_vectors[sentence]
word_vector = word_vectors[word]

# Tính độ tương đồng cosine
similarity = word_vectors.cosine_similarities(sentence_vector, [word_vector])[0]

print(f"Độ tương đồng giữa '{sentence}' và từ '{word}' là: {similarity}")

api.info("fasttext-wiki-news-subwords-300")

import numpy as np

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objs as go
from plotly.subplots import make_subplots

"""#coronavirus

Trực quan số lượng similarity với với hashtag
"""

def calculator_similarity_caption_with_coronavirus():


    # Tạo các danh sách để lưu thông tin về hashtag có similarity lớn nhất
    max_similarity_caption_coronavirus = []
    max_similarity_caption_coronavirus_values = []

    # Lặp qua mỗi dòng trong DataFrame
    for index, row in df.iterrows():

        caption = row['caption']
        coronavirus = glove_vectors["coronavirus"]

        # Tách các hashtag ra thành danh sách
        caption = str(caption)
        caption_list = caption.split()

        max_similarity = 0.0  # Để lưu độ tương đồng lớn nhất tìm thấy
        most_similar_caption = None  # Để lưu hashtag có độ tương đồng lớn nhất

        # Lặp qua từng hashtag và tính toán độ tương đồng
        for caption in caption_list:
            if(caption in glove_vectors):
                text = glove_vectors[caption]
                similarity = glove_vectors.cosine_similarities(text, [coronavirus])[0]
                similarity = round(similarity, 2)

                # Nếu độ tương đồng lớn hơn độ tương đồng lớn nhất đã tìm thấy
                if similarity > max_similarity:
                    max_similarity = similarity
                    most_similar_caption = caption

        # Lưu hashtag có độ tương đồng lớn nhất và giá trị tương đồng
        max_similarity_caption_coronavirus.append(most_similar_caption)
        max_similarity_caption_coronavirus_values.append(max_similarity)

# Thêm cột mới vào DataFrame chứa thông tin về hashtag có độ tương đồng lớn nhất và giá trị tương đồng
    df['max_similarity_caption_coronavirus'] = max_similarity_caption_coronavirus
    df['max_similarity_caption_coronavirus_values'] = max_similarity_caption_coronavirus_values
    return df


calculator_similarity_caption_with_coronavirus()

df2020 = df[df['year'] == 2020]
df2020 = df2020.groupby('max_similarity_caption_coronavirus_values').size().reset_index(name='count')

df2021 = df[df['year'] == 2021]
df2021 = df2021.groupby('max_similarity_caption_coronavirus_values').size().reset_index(name='count')

df2022 = df[df['year'] == 2022]
df2022 = df2022.groupby('max_similarity_caption_coronavirus_values').size().reset_index(name='count')

df2023 = df[df['year'] == 2023]
df2023 = df2023.groupby('max_similarity_caption_coronavirus_values').size().reset_index(name='count')

df2021.head(5)

fix = make_subplots(rows=2, cols=2, subplot_titles=("2020", "2021", "2022", "2023"))
fix.add_trace(go.Scatter(x=df2020['max_similarity_caption_coronavirus_values'], y=df2020['count'],mode='lines+markers', name='2020'),row=1, col=1)
fix.add_trace(go.Scatter(x=df2021['max_similarity_caption_coronavirus_values'], y=df2021['count'], mode='lines+markers', name='2021'),row=1, col=2)
fix.add_trace(go.Scatter(x=df2022['max_similarity_caption_coronavirus_values'], y=df2022['count'], mode='lines+markers', name='2022'),row=2, col=1)
fix.add_trace(go.Scatter(x=df2023['max_similarity_caption_coronavirus_values'], y=df2023['count'], mode='lines+markers', name='2023'),row=2, col=2)


fix.update_layout(
    title= "Similarity with caption and hashtag #coronavirus",
    xaxis_title="Similarity",
    yaxis_title="Count",

    legend=dict(
        title="YEAR",
        traceorder='normal',
        tracegroupgap=20,
        itemsizing='trace',
        itemwidth=80,
        font=dict(
            family="sans-serif",
            size=12,
            color="black"
        ),
        bordercolor="Black",
      )
)

fix.show()

"""Phần trăm số lượng các bài viết mỗi năm có similarity lớn hơn 0.3"""

threshold = 0.7
a = sum(df2020['count'][df2020['max_similarity_caption_coronavirus_values']>threshold])/sum(df2020['count'])
b = sum(df2021['count'][df2021['max_similarity_caption_coronavirus_values']>threshold])/sum(df2021['count'])
c = sum(df2022['count'][df2022['max_similarity_caption_coronavirus_values']>threshold])/sum(df2022['count'])
d = sum(df2023['count'][df2023['max_similarity_caption_coronavirus_values']>threshold])/sum(df2023['count'])
list1 = [a, b, c, d]

plt.bar(['2020', '2021', '2022', '2023'], list1)

# Đặt tiêu đề và nhãn trục
plt.title('Phần trăm các bài viết có độ tương đồng lớn hơn 0.7')
plt.xlabel('Năm')
plt.ylabel('%')

# Hiển thị biểu đồ
plt.show()

a = "coronavirus"
count = 0
for i in df.caption:
  i = str(i)
  if a in i:
    count += 1
print(count)

"""Tỉ lệ số lượng mỗi similarity"""

df2020['ti_le'] = df2020['count']/sum(df2020['count'])*100
df2021['ti_le'] = df2021['count']/sum(df2021['count'])*100
df2022['ti_le'] = df2022['count']/sum(df2022['count'])*100
df2023['ti_le'] = df2023['count']/sum(df2023['count'])*100

fix = make_subplots(rows=2, cols=2, subplot_titles=("2020", "2021", "2022", "2023"))
fix.add_trace(go.Scatter(x=df2020['max_similarity_caption_coronavirus_values'], y=df2020['ti_le'],mode='lines+markers', name='2020'),row=1, col=1)
fix.add_trace(go.Scatter(x=df2021['max_similarity_caption_coronavirus_values'], y=df2021['ti_le'], mode='lines+markers', name='2021'),row=1, col=2)
fix.add_trace(go.Scatter(x=df2022['max_similarity_caption_coronavirus_values'], y=df2022['ti_le'], mode='lines+markers', name='2022'),row=2, col=1)
fix.add_trace(go.Scatter(x=df2023['max_similarity_caption_coronavirus_values'], y=df2023['ti_le'], mode='lines+markers', name='2023'),row=2, col=2)


fix.update_layout(
    title= "Similarity with caption and hashtag #coronavirus",
    xaxis_title="Similarity",
    yaxis_title="Count",

    legend=dict(
        title="YEAR",
        traceorder='normal',
        tracegroupgap=20,
        itemsizing='trace',
        itemwidth=80,
        font=dict(
            family="sans-serif",
            size=12,
            color="black"
        ),
        bordercolor="Black",
      )
)

fix.show()

"""Trung bình similarity mỗi caption"""

def average_caption():

    # Tạo các danh sách để lưu thông tin về hashtag có similarity lớn nhất
    similarity_average = []
    similarity_average2 = []

    # Lặp qua mỗi dòng trong DataFrame
    for index, row in df.iterrows():

        caption = row['caption']
        coronavirus = glove_vectors["coronavirus"]

        # Tách các hashtag ra thành danh sách
        caption = str(caption)
        caption_list = caption.split()

        average = 0.0
        average2 = 0.0
        total_similarity = 0.0
        total_similarity2 = 0.0
        i = 0
        m = 0

        # Lặp qua từng hashtag và tính toán độ tương đồng
        for caption in caption_list:
            if(caption in glove_vectors):
                i = i + 1
                text = glove_vectors[caption]
                similarity = glove_vectors.cosine_similarities(text, [coronavirus])[0]
                if similarity < 0:
                  similarity = 0
                if similarity > 0.3:
                  m = m + 1
                  total_similarity2 = total_similarity2 + similarity

                total_similarity = total_similarity + similarity

        if i==0:
          average = 0
        elif m == 0:
          average2 = 0
        else:
          average = total_similarity / i
          average = round(average, 2)
          average2 = total_similarity2 / m
          average2 = round(average2, 2)
        # Lưu hashtag có độ tương đồng lớn nhất và giá trị tương đồng
        similarity_average.append(average)
        similarity_average2.append(average2)

# Thêm cột mới vào DataFrame chứa thông tin về hashtag có độ tương đồng lớn nhất và giá trị tương đồng
    df['average_caption'] = similarity_average
    df['average_caption2'] = similarity_average2
    return df

average_caption()

def average_caption():

    # Tạo các danh sách để lưu thông tin về hashtag có similarity lớn nhất
    similarity_average = []
    similarity_average2 = []

    # Lặp qua mỗi dòng trong DataFrame
    for index, row in df.iterrows():

        caption = row['caption']
        coronavirus = glove_vectors["coronavirus"]

        # Tách các hashtag ra thành danh sách
        caption = str(caption)
        caption_list = caption.split()

        average = 0.0
        average2 = 0.0
        total_similarity = 0.0
        total_similarity2 = 0.0
        i = 0

        # Lặp qua từng hashtag và tính toán độ tương đồng
        for caption in caption_list:
            i = i + 1
            if(caption in glove_vectors):
                text = glove_vectors[caption]
                similarity = glove_vectors.cosine_similarities(text, [coronavirus])[0]
                if similarity < 0:
                  similarity = 0
                total_similarity = total_similarity + similarity

        if i==0:
          average = 0
        else:
          average = total_similarity / i
          average = round(average, 2)
        # Lưu hashtag có độ tương đồng lớn nhất và giá trị tương đồng
        similarity_average.append(average)

# Thêm cột mới vào DataFrame chứa thông tin về hashtag có độ tương đồng lớn nhất và giá trị tương đồng
    df['average_caption'] = similarity_average
    return df

average_caption()

df2020 = df[df['year'] == 2020]
df2020 = df2020.groupby('average_caption').size().reset_index(name='count')

df2021 = df[df['year'] == 2021]
df2021 = df2021.groupby('average_caption').size().reset_index(name='count')

df2022 = df[df['year'] == 2022]
df2022 = df2022.groupby('average_caption').size().reset_index(name='count')

df2023 = df[df['year'] == 2023]
df2023 = df2023.groupby('average_caption').size().reset_index(name='count')

fix = make_subplots(rows=2, cols=2, subplot_titles=("2020", "2021", "2022", "2023"))
fix.add_trace(go.Scatter(x=df2020['average_caption'], y=df2020['count'],mode='lines+markers', name='2020'),row=1, col=1)
fix.add_trace(go.Scatter(x=df2021['average_caption'], y=df2021['count'], mode='lines+markers', name='2021'),row=1, col=2)
fix.add_trace(go.Scatter(x=df2022['average_caption'], y=df2022['count'], mode='lines+markers', name='2022'),row=2, col=1)
fix.add_trace(go.Scatter(x=df2023['average_caption'], y=df2023['count'], mode='lines+markers', name='2023'),row=2, col=2)


fix.update_layout(
    title= "Count average similarity between caption with hashtag #coronavirus",
    xaxis_title="Similarity",
    yaxis_title="Count",

    legend=dict(
        title="YEAR",
        traceorder='normal',
        tracegroupgap=20,
        itemsizing='trace',
        itemwidth=80,
        font=dict(
            family="sans-serif",
            size=12,
            color="black"
        ),
        bordercolor="Black",
      )
)

fix.show()

"""Similarity trung bình của caption lớn hơn 0.3"""

threshold = 0.7
a = sum(df2020['count'][df2020['average_caption']>threshold])/sum(df2020['count'])
b = sum(df2021['count'][df2021['average_caption']>threshold])/sum(df2021['count'])
c = sum(df2022['count'][df2022['average_caption']>threshold])/sum(df2022['count'])
d = sum(df2023['count'][df2023['average_caption']>threshold])/sum(df2023['count'])
list1 = [a, b, c, d]

plt.bar(['2020', '2021', '2022', '2023'], list1)

# Đặt tiêu đề và nhãn trục
plt.title('Phần trăm các bài viết có độ tương đồng lớn hơn 0.7')
plt.xlabel('Năm')
plt.ylabel('%')

# Hiển thị biểu đồ
plt.show()

# def calculator_max_similarity_caption_with_hashtag():


#     # Tạo các danh sách để lưu thông tin về hashtag có similarity lớn nhất
#     max_similarity_caption = []
#     max_similarity_hashtag = []
#     max_similarity_caption_hashtag_values = []

#     # Lặp qua mỗi dòng trong DataFrame
#     for index, row in df.iterrows():

#         caption = row['caption']
#         hashtags = row['hashtags']
#         coronavirus = glove_vectors["coronavirus"]

#         # Tách các hashtag ra thành danh sách
#         caption_list = caption.split()

#         max_similarity = 0.0  # Để lưu độ tương đồng lớn nhất tìm thấy
#         most_similar_hashtag = None  # Để lưu hashtag có độ tương đồng lớn nhất
#         most_similar_caption = None  # Để lưu hashtag có độ tương đồng lớn nhất
#         # Lặp qua từng hashtag và tính toán độ tương đồng
#         for caption in caption_list:
#             for hashtag in hashtags:
#                 if(caption in glove_vectors and hashtag in glove_vectors ):
#                     text_caption = glove_vectors[caption]
#                     text_hashtag = glove_vectors[hashtag]
#                     similarity = glove_vectors.cosine_similarities(text_caption,[text_hashtag])[0]
#                     similarity = round(similarity, 2)

#                     # Nếu độ tương đồng lớn hơn độ tương đồng lớn nhất đã tìm thấy
#                     if similarity > max_similarity:
#                         max_similarity = similarity
#                         most_similar_hashtag = hashtag
#                         most_similar_caption = caption


#         max_similarity_hashtag.append(most_similar_hashtag)
#         max_similarity_caption.append(most_similar_caption)
#         max_similarity_caption_hashtag_values.append(max_similarity)

# # Thêm cột mới vào DataFrame chứa thông tin về hashtag có độ tương đồng lớn nhất và giá trị tương đồng
#     df['max_similarity_hashtag'] = max_similarity_hashtag
#     df['max_similarity_caption'] = max_similarity_caption
#     df['max_similarity_caption_hashtag_values'] = max_similarity_caption_hashtag_values


#     return df

# calculator_max_similarity_caption_with_hashtag()

"""#isolation"""

df = pd.read_csv('/content/drive/MyDrive/data/caption.csv')
new_columns = ['shortCode','year', 'caption', 'hashtags']
df = df[new_columns]

"""Trực quan số lượng similarity với với hashtag"""

def calculator_similarity_caption_with_isolation():


    # Tạo các danh sách để lưu thông tin về hashtag có similarity lớn nhất
    max_similarity_caption_isolation = []
    max_similarity_caption_isolation_values = []

    # Lặp qua mỗi dòng trong DataFrame
    for index, row in df.iterrows():

        caption = row['caption']
        isolation = glove_vectors["isolation"]

        # Tách các hashtag ra thành danh sách
        caption = str(caption)
        caption_list = caption.split()

        max_similarity = 0.0  # Để lưu độ tương đồng lớn nhất tìm thấy
        most_similar_caption = None  # Để lưu hashtag có độ tương đồng lớn nhất

        # Lặp qua từng hashtag và tính toán độ tương đồng
        for caption in caption_list:
            if(caption in glove_vectors):
                text = glove_vectors[caption]
                similarity = glove_vectors.cosine_similarities(text, [isolation])[0]
                similarity = round(similarity, 2)

                # Nếu độ tương đồng lớn hơn độ tương đồng lớn nhất đã tìm thấy
                if similarity > max_similarity:
                    max_similarity = similarity
                    most_similar_caption = caption

        # Lưu hashtag có độ tương đồng lớn nhất và giá trị tương đồng
        max_similarity_caption_isolation.append(most_similar_caption)
        max_similarity_caption_isolation_values.append(max_similarity)

# Thêm cột mới vào DataFrame chứa thông tin về hashtag có độ tương đồng lớn nhất và giá trị tương đồng
    df['max_similarity_caption_isolation'] = max_similarity_caption_isolation
    df['max_similarity_caption_isolation_values'] = max_similarity_caption_isolation_values
    return df


calculator_similarity_caption_with_isolation()

df2020 = df[df['year'] == 2020]
df2020 = df2020.groupby('max_similarity_caption_isolation_values').size().reset_index(name='count')

df2021 = df[df['year'] == 2021]
df2021 = df2021.groupby('max_similarity_caption_isolation_values').size().reset_index(name='count')

df2022 = df[df['year'] == 2022]
df2022 = df2022.groupby('max_similarity_caption_isolation_values').size().reset_index(name='count')

df2023 = df[df['year'] == 2023]
df2023 = df2023.groupby('max_similarity_caption_isolation_values').size().reset_index(name='count')

fix = make_subplots(rows=2, cols=2, subplot_titles=("2020", "2021", "2022", "2023"))
fix.add_trace(go.Scatter(x=df2020['max_similarity_caption_isolation_values'], y=df2020['count'],mode='lines+markers', name='2020'),row=1, col=1)
fix.add_trace(go.Scatter(x=df2021['max_similarity_caption_isolation_values'], y=df2021['count'], mode='lines+markers', name='2021'),row=1, col=2)
fix.add_trace(go.Scatter(x=df2022['max_similarity_caption_isolation_values'], y=df2022['count'], mode='lines+markers', name='2022'),row=2, col=1)
fix.add_trace(go.Scatter(x=df2023['max_similarity_caption_isolation_values'], y=df2023['count'], mode='lines+markers', name='2023'),row=2, col=2)


fix.update_layout(
    title= "Similarity with caption and hashtag #isolation",
    xaxis_title="Similarity",
    yaxis_title="Count",

    legend=dict(
        title="YEAR",
        traceorder='normal',
        tracegroupgap=20,
        itemsizing='trace',
        itemwidth=80,
        font=dict(
            family="sans-serif",
            size=12,
            color="black"
        ),
        bordercolor="Black",
      )
)

fix.show()

threshold = 0.7
b = sum(df2021['count'][df2021['max_similarity_caption_isolation_values']>threshold])/sum(df2021['count'])
c = sum(df2022['count'][df2022['max_similarity_caption_isolation_values']>threshold])/sum(df2022['count'])
d = sum(df2023['count'][df2023['max_similarity_caption_isolation_values']>threshold])/sum(df2023['count'])
list1 = [a, b, c, d]

plt.bar(['2020', '2021', '2022', '2023'], list1)

# Đặt tiêu đề và nhãn trục
plt.title('Phần trăm các bài viết có độ tương đồng lớn hơn 0.7')
plt.xlabel('Năm')
plt.ylabel('%')

# Hiển thị biểu đồ
plt.show()

"""Tỉ lệ số lượng mỗi similarity"""

df2020['ti_le'] = df2020['count']/sum(df2020['count'])*100
df2021['ti_le'] = df2021['count']/sum(df2021['count'])*100
df2022['ti_le'] = df2022['count']/sum(df2022['count'])*100
df2023['ti_le'] = df2023['count']/sum(df2023['count'])*100

fix = make_subplots(rows=2, cols=2, subplot_titles=("2020", "2021", "2022", "2023"))
fix.add_trace(go.Scatter(x=df2020['max_similarity_caption_isolation_values'], y=df2020['ti_le'],mode='lines+markers', name='2020'),row=1, col=1)
fix.add_trace(go.Scatter(x=df2021['max_similarity_caption_isolation_values'], y=df2021['ti_le'], mode='lines+markers', name='2021'),row=1, col=2)
fix.add_trace(go.Scatter(x=df2022['max_similarity_caption_isolation_values'], y=df2022['ti_le'], mode='lines+markers', name='2022'),row=2, col=1)
fix.add_trace(go.Scatter(x=df2023['max_similarity_caption_isolation_values'], y=df2023['ti_le'], mode='lines+markers', name='2023'),row=2, col=2)


fix.update_layout(
    title= "Similarity with caption and hashtag #isolation",
    xaxis_title="Similarity",
    yaxis_title="Count",

    legend=dict(
        title="YEAR",
        traceorder='normal',
        tracegroupgap=20,
        itemsizing='trace',
        itemwidth=80,
        font=dict(
            family="sans-serif",
            size=12,
            color="black"
        ),
        bordercolor="Black",
      )
)

fix.show()

df = pd.read_csv('/content/drive/MyDrive/data/caption.csv')
new_columns = ['shortCode','year', 'caption', 'hashtags']
df = df[new_columns]

"""Trung bình similarity mỗi caption"""

def average_caption():

    # Tạo các danh sách để lưu thông tin về hashtag có similarity lớn nhất
    similarity_average = []
    similarity_average2 = []

    # Lặp qua mỗi dòng trong DataFrame
    for index, row in df.iterrows():

        caption = row['caption']
        isolation = glove_vectors["isolation"]

        # Tách các hashtag ra thành danh sách
        caption = str(caption)
        caption_list = caption.split()

        average = 0.0
        average2 = 0.0
        total_similarity = 0.0
        total_similarity2 = 0.0
        i = 0
        # Lặp qua từng hashtag và tính toán độ tương đồng
        for caption in caption_list:
            if(caption in glove_vectors):
                i = i + 1
                text = glove_vectors[caption]
                similarity = glove_vectors.cosine_similarities(text, [isolation])[0]
                if similarity < 0:
                  similarity = 0

                total_similarity = total_similarity + similarity

        if i==0:
          average = 0
        else:
          average = total_similarity / i
          average = round(average, 2)
        # Lưu hashtag có độ tương đồng lớn nhất và giá trị tương đồng
        similarity_average.append(average)

# Thêm cột mới vào DataFrame chứa thông tin về hashtag có độ tương đồng lớn nhất và giá trị tương đồng
    df['average_caption'] = similarity_average
    return df

average_caption()

df2020 = df[df['year'] == 2020]
df2020 = df2020.groupby('average_caption').size().reset_index(name='count')

df2021 = df[df['year'] == 2021]
df2021 = df2021.groupby('average_caption').size().reset_index(name='count')

df2022 = df[df['year'] == 2022]
df2022 = df2022.groupby('average_caption').size().reset_index(name='count')

df2023 = df[df['year'] == 2023]
df2023 = df2023.groupby('average_caption').size().reset_index(name='count')

fix = make_subplots(rows=2, cols=2, subplot_titles=("2020", "2021", "2022", "2023"))
fix.add_trace(go.Scatter(x=df2020['average_caption'], y=df2020['count'],mode='lines+markers', name='2020'),row=1, col=1)
fix.add_trace(go.Scatter(x=df2021['average_caption'], y=df2021['count'], mode='lines+markers', name='2021'),row=1, col=2)
fix.add_trace(go.Scatter(x=df2022['average_caption'], y=df2022['count'], mode='lines+markers', name='2022'),row=2, col=1)
fix.add_trace(go.Scatter(x=df2023['average_caption'], y=df2023['count'], mode='lines+markers', name='2023'),row=2, col=2)


fix.update_layout(
    title= "Count average similarity between caption with hashtag #isolation",
    xaxis_title="Similarity",
    yaxis_title="Count",

    legend=dict(
        title="YEAR",
        traceorder='normal',
        tracegroupgap=20,
        itemsizing='trace',
        itemwidth=80,
        font=dict(
            family="sans-serif",
            size=12,
            color="black"
        ),
        bordercolor="Black",
      )
)

fix.show()

"""Similarity trung bình của caption lớn hơn 0.3"""

threshold = 0.7
a = sum(df2020['count'][df2020['average_caption']>threshold])/sum(df2020['count'])
b = sum(df2021['count'][df2021['average_caption']>threshold])/sum(df2021['count'])
c = sum(df2022['count'][df2022['average_caption']>threshold])/sum(df2022['count'])
d = sum(df2023['count'][df2023['average_caption']>threshold])/sum(df2023['count'])
list1 = [a, b, c, d]

plt.bar(['2020', '2021', '2022', '2023'], list1)

# Đặt tiêu đề và nhãn trục
plt.title('Phần trăm các bài viết có độ tương đồng lớn hơn 0.7')
plt.xlabel('Năm')
plt.ylabel('%')

# Hiển thị biểu đồ
plt.show()

"""#vaccine

"""

df = pd.read_csv('/content/drive/MyDrive/data/caption.csv')
new_columns = ['shortCode','year', 'caption', 'hashtags']
df = df[new_columns]

def calculator_similarity_caption_with_vaccine():


    # Tạo các danh sách để lưu thông tin về hashtag có similarity lớn nhất
    max_similarity_caption_vaccine = []
    max_similarity_caption_vaccine_values = []

    # Lặp qua mỗi dòng trong DataFrame
    for index, row in df.iterrows():

        caption = row['caption']
        vaccine = glove_vectors["vaccine"]

        # Tách các hashtag ra thành danh sách
        caption = str(caption)
        caption_list = caption.split()

        max_similarity = 0.0  # Để lưu độ tương đồng lớn nhất tìm thấy
        most_similar_caption = None  # Để lưu hashtag có độ tương đồng lớn nhất

        # Lặp qua từng hashtag và tính toán độ tương đồng
        for caption in caption_list:
            if(caption in glove_vectors):
                text = glove_vectors[caption]
                similarity = glove_vectors.cosine_similarities(text, [vaccine])[0]
                similarity = round(similarity, 2)

                # Nếu độ tương đồng lớn hơn độ tương đồng lớn nhất đã tìm thấy
                if similarity > max_similarity:
                    max_similarity = similarity
                    most_similar_caption = caption

        # Lưu hashtag có độ tương đồng lớn nhất và giá trị tương đồng
        max_similarity_caption_vaccine.append(most_similar_caption)
        max_similarity_caption_vaccine_values.append(max_similarity)

# Thêm cột mới vào DataFrame chứa thông tin về hashtag có độ tương đồng lớn nhất và giá trị tương đồng
    df['max_similarity_caption_vaccine'] = max_similarity_caption_vaccine
    df['max_similarity_caption_vaccine_values'] = max_similarity_caption_vaccine_values
    return df


calculator_similarity_caption_with_vaccine()


df2020 = df[df['year'] == 2020]
df2020 = df2020.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

df2021 = df[df['year'] == 2021]
df2021 = df2021.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

df2022 = df[df['year'] == 2022]
df2022 = df2022.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

df2023 = df[df['year'] == 2023]
df2023 = df2023.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

fix = make_subplots(rows=2, cols=2, subplot_titles=("2020", "2021", "2022", "2023"))
fix.add_trace(go.Scatter(x=df2020['max_similarity_caption_vaccine_values'], y=df2020['count'],mode='lines+markers', name='2020'),row=1, col=1)
fix.add_trace(go.Scatter(x=df2021['max_similarity_caption_vaccine_values'], y=df2021['count'], mode='lines+markers', name='2021'),row=1, col=2)
fix.add_trace(go.Scatter(x=df2022['max_similarity_caption_vaccine_values'], y=df2022['count'], mode='lines+markers', name='2022'),row=2, col=1)
fix.add_trace(go.Scatter(x=df2023['max_similarity_caption_vaccine_values'], y=df2023['count'], mode='lines+markers', name='2023'),row=2, col=2)


fix.update_layout(
    title= "Similarity with caption and hashtag #vaccine",
    xaxis_title="Similarity",
    yaxis_title="Count",

    legend=dict(
        title="YEAR",
        traceorder='normal',
        tracegroupgap=20,
        itemsizing='trace',
        itemwidth=80,
        font=dict(
            family="sans-serif",
            size=12,
            color="black"
        ),
        bordercolor="Black",
      )
)

fix.show()

threshold = 0.7
b = sum(df2021['count'][df2021['max_similarity_caption_vaccine_values']>threshold])/sum(df2021['count'])
c = sum(df2022['count'][df2022['max_similarity_caption_vaccine_values']>threshold])/sum(df2022['count'])
d = sum(df2023['count'][df2023['max_similarity_caption_vaccine_values']>threshold])/sum(df2023['count'])
list1 = [a, b, c, d]

plt.bar(['2020', '2021', '2022', '2023'], list1)

# Đặt tiêu đề và nhãn trục
plt.title('Phần trăm các bài viết có độ tương đồng lớn hơn 0.7')
plt.xlabel('Năm')
plt.ylabel('%')

# Hiển thị biểu đồ
plt.show()

def average_caption():

    # Tạo các danh sách để lưu thông tin về hashtag có similarity lớn nhất
    similarity_average = []
    similarity_average2 = []

    # Lặp qua mỗi dòng trong DataFrame
    for index, row in df.iterrows():

        caption = row['caption']
        vaccine = glove_vectors["vaccine"]

        # Tách các hashtag ra thành danh sách
        caption = str(caption)
        caption_list = caption.split()

        average = 0.0
        average2 = 0.0
        total_similarity = 0.0
        total_similarity2 = 0.0
        i = 0
        m = 0

        # Lặp qua từng hashtag và tính toán độ tương đồng
        for caption in caption_list:
            if(caption in glove_vectors):
                i = i + 1
                text = glove_vectors[caption]
                similarity = glove_vectors.cosine_similarities(text, [vaccine])[0]
                if similarity < 0:
                  similarity = 0
                total_similarity = total_similarity + similarity

        if i==0:
          average = 0
        else:
          average = total_similarity / i
          average = round(average, 2)
        # Lưu hashtag có độ tương đồng lớn nhất và giá trị tương đồng
        similarity_average.append(average)
# Thêm cột mới vào DataFrame chứa thông tin về hashtag có độ tương đồng lớn nhất và giá trị tương đồng
    df['average_caption'] = similarity_average
    return df

average_caption()

df2020 = df[df['year'] == 2020]
df2020 = df2020.groupby('average_caption').size().reset_index(name='count')

df2021 = df[df['year'] == 2021]
df2021 = df2021.groupby('average_caption').size().reset_index(name='count')

df2022 = df[df['year'] == 2022]
df2022 = df2022.groupby('average_caption').size().reset_index(name='count')

df2023 = df[df['year'] == 2023]
df2023 = df2023.groupby('average_caption').size().reset_index(name='count')

fix = make_subplots(rows=2, cols=2, subplot_titles=("2020", "2021", "2022", "2023"))
fix.add_trace(go.Scatter(x=df2020['average_caption'], y=df2020['count'],mode='lines+markers', name='2020'),row=1, col=1)
fix.add_trace(go.Scatter(x=df2021['average_caption'], y=df2021['count'], mode='lines+markers', name='2021'),row=1, col=2)
fix.add_trace(go.Scatter(x=df2022['average_caption'], y=df2022['count'], mode='lines+markers', name='2022'),row=2, col=1)
fix.add_trace(go.Scatter(x=df2023['average_caption'], y=df2023['count'], mode='lines+markers', name='2023'),row=2, col=2)


fix.update_layout(
    title= "Count average similarity between caption with hashtag #vaccine",
    xaxis_title="Similarity",
    yaxis_title="Count",

    legend=dict(
        title="YEAR",
        traceorder='normal',
        tracegroupgap=20,
        itemsizing='trace',
        itemwidth=80,
        font=dict(
            family="sans-serif",
            size=12,
            color="black"
        ),
        bordercolor="Black",
      )
)

fix.show()

threshold = 0.7
a = sum(df2020['count'][df2020['average_caption']>threshold])/sum(df2020['count'])
b = sum(df2021['count'][df2021['average_caption']>threshold])/sum(df2021['count'])
c = sum(df2022['count'][df2022['average_caption']>threshold])/sum(df2022['count'])
d = sum(df2023['count'][df2023['average_caption']>threshold])/sum(df2023['count'])
list1 = [a, b, c, d]

plt.bar(['2020', '2021', '2022', '2023'], list1)

# Đặt tiêu đề và nhãn trục
plt.title('Phần trăm các bài viết có độ tương đồng lớn hơn 0.7')
plt.xlabel('Năm')
plt.ylabel('%')

# Hiển thị biểu đồ
plt.show()

"""#LOCKDOWN

"""

df = pd.read_csv('/content/drive/MyDrive/data/caption.csv')
new_columns = ['shortCode','year', 'caption', 'hashtags']
df = df[new_columns]

def calculator_similarity_caption_with_lockdown():


    # Tạo các danh sách để lưu thông tin về hashtag có similarity lớn nhất
    max_similarity_caption_vaccine = []
    max_similarity_caption_vaccine_values = []

    # Lặp qua mỗi dòng trong DataFrame
    for index, row in df.iterrows():

        caption = row['caption']
        vaccine = glove_vectors["lockdown"]

        # Tách các hashtag ra thành danh sách
        caption = str(caption)
        caption_list = caption.split()

        max_similarity = 0.0  # Để lưu độ tương đồng lớn nhất tìm thấy
        most_similar_caption = None  # Để lưu hashtag có độ tương đồng lớn nhất

        # Lặp qua từng hashtag và tính toán độ tương đồng
        for caption in caption_list:
            if(caption in glove_vectors):
                text = glove_vectors[caption]
                similarity = glove_vectors.cosine_similarities(text, [vaccine])[0]
                similarity = round(similarity, 2)

                # Nếu độ tương đồng lớn hơn độ tương đồng lớn nhất đã tìm thấy
                if similarity > max_similarity:
                    max_similarity = similarity
                    most_similar_caption = caption

        # Lưu hashtag có độ tương đồng lớn nhất và giá trị tương đồng
        max_similarity_caption_vaccine.append(most_similar_caption)
        max_similarity_caption_vaccine_values.append(max_similarity)

# Thêm cột mới vào DataFrame chứa thông tin về hashtag có độ tương đồng lớn nhất và giá trị tương đồng
    df['max_similarity_caption_vaccine'] = max_similarity_caption_vaccine
    df['max_similarity_caption_vaccine_values'] = max_similarity_caption_vaccine_values
    return df


calculator_similarity_caption_with_lockdown()


df2020 = df[df['year'] == 2020]
df2020 = df2020.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

df2021 = df[df['year'] == 2021]
df2021 = df2021.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

df2022 = df[df['year'] == 2022]
df2022 = df2022.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

df2023 = df[df['year'] == 2023]
df2023 = df2023.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

fix = make_subplots(rows=2, cols=2, subplot_titles=("2020", "2021", "2022", "2023"))
fix.add_trace(go.Scatter(x=df2020['max_similarity_caption_vaccine_values'], y=df2020['count'],mode='lines+markers', name='2020'),row=1, col=1)
fix.add_trace(go.Scatter(x=df2021['max_similarity_caption_vaccine_values'], y=df2021['count'], mode='lines+markers', name='2021'),row=1, col=2)
fix.add_trace(go.Scatter(x=df2022['max_similarity_caption_vaccine_values'], y=df2022['count'], mode='lines+markers', name='2022'),row=2, col=1)
fix.add_trace(go.Scatter(x=df2023['max_similarity_caption_vaccine_values'], y=df2023['count'], mode='lines+markers', name='2023'),row=2, col=2)


fix.update_layout(
    title= "Similarity with caption and hashtag #lockdown",
    xaxis_title="Similarity",
    yaxis_title="Count",

    legend=dict(
        title="YEAR",
        traceorder='normal',
        tracegroupgap=20,
        itemsizing='trace',
        itemwidth=80,
        font=dict(
            family="sans-serif",
            size=12,
            color="black"
        ),
        bordercolor="Black",
      )
)

fix.show()

threshold = 0.7
b = sum(df2021['count'][df2021['max_similarity_caption_vaccine_values']>threshold])/sum(df2021['count'])
c = sum(df2022['count'][df2022['max_similarity_caption_vaccine_values']>threshold])/sum(df2022['count'])
d = sum(df2023['count'][df2023['max_similarity_caption_vaccine_values']>threshold])/sum(df2023['count'])
list1 = [a, b, c, d]

plt.bar(['2020', '2021', '2022', '2023'], list1)

# Đặt tiêu đề và nhãn trục
plt.title('Phần trăm các bài viết có độ tương đồng lớn hơn 0.7')
plt.xlabel('Năm')
plt.ylabel('%')

# Hiển thị biểu đồ
plt.show()

def average_caption():

    # Tạo các danh sách để lưu thông tin về hashtag có similarity lớn nhất
    similarity_average = []
    similarity_average2 = []

    # Lặp qua mỗi dòng trong DataFrame
    for index, row in df.iterrows():

        caption = row['caption']
        vaccine = glove_vectors["lockdown"]

        # Tách các hashtag ra thành danh sách
        caption = str(caption)
        caption_list = caption.split()

        average = 0.0
        average2 = 0.0
        total_similarity = 0.0
        total_similarity2 = 0.0
        i = 0

        # Lặp qua từng hashtag và tính toán độ tương đồng
        for caption in caption_list:
            if(caption in glove_vectors):
                i = i + 1
                text = glove_vectors[caption]
                similarity = glove_vectors.cosine_similarities(text, [vaccine])[0]
                if similarity < 0:
                  similarity = 0
                total_similarity = total_similarity + similarity

        if i==0:
          average = 0
        else:
          average = total_similarity / i
          average = round(average, 2)
        # Lưu hashtag có độ tương đồng lớn nhất và giá trị tương đồng
        similarity_average.append(average)
# Thêm cột mới vào DataFrame chứa thông tin về hashtag có độ tương đồng lớn nhất và giá trị tương đồng
    df['average_caption'] = similarity_average
    return df

average_caption()

df2020 = df[df['year'] == 2020]
df2020 = df2020.groupby('average_caption').size().reset_index(name='count')

df2021 = df[df['year'] == 2021]
df2021 = df2021.groupby('average_caption').size().reset_index(name='count')

df2022 = df[df['year'] == 2022]
df2022 = df2022.groupby('average_caption').size().reset_index(name='count')

df2023 = df[df['year'] == 2023]
df2023 = df2023.groupby('average_caption').size().reset_index(name='count')

fix = make_subplots(rows=2, cols=2, subplot_titles=("2020", "2021", "2022", "2023"))
fix.add_trace(go.Scatter(x=df2020['average_caption'], y=df2020['count'],mode='lines+markers', name='2020'),row=1, col=1)
fix.add_trace(go.Scatter(x=df2021['average_caption'], y=df2021['count'], mode='lines+markers', name='2021'),row=1, col=2)
fix.add_trace(go.Scatter(x=df2022['average_caption'], y=df2022['count'], mode='lines+markers', name='2022'),row=2, col=1)
fix.add_trace(go.Scatter(x=df2023['average_caption'], y=df2023['count'], mode='lines+markers', name='2023'),row=2, col=2)


fix.update_layout(
    title= "Count average similarity between caption with hashtag #lockdown",
    xaxis_title="Similarity",
    yaxis_title="Count",

    legend=dict(
        title="YEAR",
        traceorder='normal',
        tracegroupgap=20,
        itemsizing='trace',
        itemwidth=80,
        font=dict(
            family="sans-serif",
            size=12,
            color="black"
        ),
        bordercolor="Black",
      )
)

fix.show()

threshold = 0.7
a = sum(df2020['count'][df2020['average_caption']>threshold])/sum(df2020['count'])
b = sum(df2021['count'][df2021['average_caption']>threshold])/sum(df2021['count'])
c = sum(df2022['count'][df2022['average_caption']>threshold])/sum(df2022['count'])
d = sum(df2023['count'][df2023['average_caption']>threshold])/sum(df2023['count'])
list1 = [a, b, c, d]

plt.bar(['2020', '2021', '2022', '2023'], list1)

# Đặt tiêu đề và nhãn trục
plt.title('Phần trăm các bài viết có độ tương đồng lớn hơn 0.7')
plt.xlabel('Năm')
plt.ylabel('%')

# Hiển thị biểu đồ
plt.show()

"""#VIRUS

"""

df = pd.read_csv('/content/drive/MyDrive/data/caption.csv')
new_columns = ['shortCode','year', 'caption', 'hashtags']
df = df[new_columns]

def calculator_similarity_caption_with_virus():


    # Tạo các danh sách để lưu thông tin về hashtag có similarity lớn nhất
    max_similarity_caption_vaccine = []
    max_similarity_caption_vaccine_values = []

    # Lặp qua mỗi dòng trong DataFrame
    for index, row in df.iterrows():

        caption = row['caption']
        vaccine = glove_vectors["virus"]

        # Tách các hashtag ra thành danh sách
        caption = str(caption)
        caption_list = caption.split()

        max_similarity = 0.0  # Để lưu độ tương đồng lớn nhất tìm thấy
        most_similar_caption = None  # Để lưu hashtag có độ tương đồng lớn nhất

        # Lặp qua từng hashtag và tính toán độ tương đồng
        for caption in caption_list:
            if(caption in glove_vectors):
                text = glove_vectors[caption]
                similarity = glove_vectors.cosine_similarities(text, [vaccine])[0]
                similarity = round(similarity, 2)

                # Nếu độ tương đồng lớn hơn độ tương đồng lớn nhất đã tìm thấy
                if similarity > max_similarity:
                    max_similarity = similarity
                    most_similar_caption = caption

        # Lưu hashtag có độ tương đồng lớn nhất và giá trị tương đồng
        max_similarity_caption_vaccine.append(most_similar_caption)
        max_similarity_caption_vaccine_values.append(max_similarity)

# Thêm cột mới vào DataFrame chứa thông tin về hashtag có độ tương đồng lớn nhất và giá trị tương đồng
    df['max_similarity_caption_vaccine'] = max_similarity_caption_vaccine
    df['max_similarity_caption_vaccine_values'] = max_similarity_caption_vaccine_values
    return df


calculator_similarity_caption_with_virus()


df2020 = df[df['year'] == 2020]
df2020 = df2020.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

df2021 = df[df['year'] == 2021]
df2021 = df2021.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

df2022 = df[df['year'] == 2022]
df2022 = df2022.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

df2023 = df[df['year'] == 2023]
df2023 = df2023.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

fix = make_subplots(rows=2, cols=2, subplot_titles=("2020", "2021", "2022", "2023"))
fix.add_trace(go.Scatter(x=df2020['max_similarity_caption_vaccine_values'], y=df2020['count'],mode='lines+markers', name='2020'),row=1, col=1)
fix.add_trace(go.Scatter(x=df2021['max_similarity_caption_vaccine_values'], y=df2021['count'], mode='lines+markers', name='2021'),row=1, col=2)
fix.add_trace(go.Scatter(x=df2022['max_similarity_caption_vaccine_values'], y=df2022['count'], mode='lines+markers', name='2022'),row=2, col=1)
fix.add_trace(go.Scatter(x=df2023['max_similarity_caption_vaccine_values'], y=df2023['count'], mode='lines+markers', name='2023'),row=2, col=2)


fix.update_layout(
    title= "Similarity with caption and hashtag #virus",
    xaxis_title="Similarity",
    yaxis_title="Count",

    legend=dict(
        title="YEAR",
        traceorder='normal',
        tracegroupgap=20,
        itemsizing='trace',
        itemwidth=80,
        font=dict(
            family="sans-serif",
            size=12,
            color="black"
        ),
        bordercolor="Black",
      )
)

fix.show()

threshold = 0.7
a = sum(df2020['count'][df2020['max_similarity_caption_vaccine_values']>threshold])/sum(df2020['count'])
b = sum(df2021['count'][df2021['max_similarity_caption_vaccine_values']>threshold])/sum(df2021['count'])
c = sum(df2022['count'][df2022['max_similarity_caption_vaccine_values']>threshold])/sum(df2022['count'])
d = sum(df2023['count'][df2023['max_similarity_caption_vaccine_values']>threshold])/sum(df2023['count'])
list1 = [a, b, c, d]

plt.bar(['2020', '2021', '2022', '2023'], list1)

# Đặt tiêu đề và nhãn trục
plt.title('Phần trăm các bài viết có độ tương đồng lớn hơn 0.7')
plt.xlabel('Năm')
plt.ylabel('%')

# Hiển thị biểu đồ
plt.show()

def average_caption():

    # Tạo các danh sách để lưu thông tin về hashtag có similarity lớn nhất
    similarity_average = []
    similarity_average2 = []

    # Lặp qua mỗi dòng trong DataFrame
    for index, row in df.iterrows():

        caption = row['caption']
        vaccine = glove_vectors["virus"]

        # Tách các hashtag ra thành danh sách
        caption = str(caption)
        caption_list = caption.split()

        average = 0.0
        average2 = 0.0
        total_similarity = 0.0
        total_similarity2 = 0.0
        i = 0
        m = 0

        # Lặp qua từng hashtag và tính toán độ tương đồng
        for caption in caption_list:
            if(caption in glove_vectors):
                i = i + 1
                text = glove_vectors[caption]
                similarity = glove_vectors.cosine_similarities(text, [vaccine])[0]
                if similarity < 0:
                  similarity = 0
                total_similarity = total_similarity + similarity

        if i==0:
          average = 0
        else:
          average = total_similarity / i
          average = round(average, 2)
        # Lưu hashtag có độ tương đồng lớn nhất và giá trị tương đồng
        similarity_average.append(average)
# Thêm cột mới vào DataFrame chứa thông tin về hashtag có độ tương đồng lớn nhất và giá trị tương đồng
    df['average_caption'] = similarity_average
    return df

average_caption()

df2020 = df[df['year'] == 2020]
df2020 = df2020.groupby('average_caption').size().reset_index(name='count')

df2021 = df[df['year'] == 2021]
df2021 = df2021.groupby('average_caption').size().reset_index(name='count')

df2022 = df[df['year'] == 2022]
df2022 = df2022.groupby('average_caption').size().reset_index(name='count')

df2023 = df[df['year'] == 2023]
df2023 = df2023.groupby('average_caption').size().reset_index(name='count')

fix = make_subplots(rows=2, cols=2, subplot_titles=("2020", "2021", "2022", "2023"))
fix.add_trace(go.Scatter(x=df2020['average_caption'], y=df2020['count'],mode='lines+markers', name='2020'),row=1, col=1)
fix.add_trace(go.Scatter(x=df2021['average_caption'], y=df2021['count'], mode='lines+markers', name='2021'),row=1, col=2)
fix.add_trace(go.Scatter(x=df2022['average_caption'], y=df2022['count'], mode='lines+markers', name='2022'),row=2, col=1)
fix.add_trace(go.Scatter(x=df2023['average_caption'], y=df2023['count'], mode='lines+markers', name='2023'),row=2, col=2)


fix.update_layout(
    title= "Count average similarity between caption with hashtag #virus",
    xaxis_title="Similarity",
    yaxis_title="Count",

    legend=dict(
        title="YEAR",
        traceorder='normal',
        tracegroupgap=20,
        itemsizing='trace',
        itemwidth=80,
        font=dict(
            family="sans-serif",
            size=12,
            color="black"
        ),
        bordercolor="Black",
      )
)

fix.show()

threshold = 0.5
a = sum(df2020['count'][df2020['average_caption']>threshold])/sum(df2020['count'])
b = sum(df2021['count'][df2021['average_caption']>threshold])/sum(df2021['count'])
c = sum(df2022['count'][df2022['average_caption']>threshold])/sum(df2022['count'])
d = sum(df2023['count'][df2023['average_caption']>threshold])/sum(df2023['count'])
list1 = [a, b, c, d]

plt.bar(['2020', '2021', '2022', '2023'], list1)

# Đặt tiêu đề và nhãn trục
plt.title('Phần trăm các bài viết có độ tương đồng lớn hơn 0.5')
plt.xlabel('Năm')
plt.ylabel('%')

# Hiển thị biểu đồ
plt.show()



"""#PANDEMIC

"""

df = pd.read_csv('/content/drive/MyDrive/data/caption.csv')
new_columns = ['shortCode','year', 'caption', 'hashtags']
df = df[new_columns]

def calculator_similarity_caption_with_pandemic():


    # Tạo các danh sách để lưu thông tin về hashtag có similarity lớn nhất
    max_similarity_caption_vaccine = []
    max_similarity_caption_vaccine_values = []

    # Lặp qua mỗi dòng trong DataFrame
    for index, row in df.iterrows():

        caption = row['caption']
        vaccine = glove_vectors["pandemic"]

        # Tách các hashtag ra thành danh sách
        caption = str(caption)
        caption_list = caption.split()

        max_similarity = 0.0  # Để lưu độ tương đồng lớn nhất tìm thấy
        most_similar_caption = None  # Để lưu hashtag có độ tương đồng lớn nhất

        # Lặp qua từng hashtag và tính toán độ tương đồng
        for caption in caption_list:
            if(caption in glove_vectors):
                text = glove_vectors[caption]
                similarity = glove_vectors.cosine_similarities(text, [vaccine])[0]
                similarity = round(similarity, 2)

                # Nếu độ tương đồng lớn hơn độ tương đồng lớn nhất đã tìm thấy
                if similarity > max_similarity:
                    max_similarity = similarity
                    most_similar_caption = caption

        # Lưu hashtag có độ tương đồng lớn nhất và giá trị tương đồng
        max_similarity_caption_vaccine.append(most_similar_caption)
        max_similarity_caption_vaccine_values.append(max_similarity)

# Thêm cột mới vào DataFrame chứa thông tin về hashtag có độ tương đồng lớn nhất và giá trị tương đồng
    df['max_similarity_caption_vaccine'] = max_similarity_caption_vaccine
    df['max_similarity_caption_vaccine_values'] = max_similarity_caption_vaccine_values
    return df


calculator_similarity_caption_with_pandemic()


df2020 = df[df['year'] == 2020]
df2020 = df2020.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

df2021 = df[df['year'] == 2021]
df2021 = df2021.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

df2022 = df[df['year'] == 2022]
df2022 = df2022.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

df2023 = df[df['year'] == 2023]
df2023 = df2023.groupby('max_similarity_caption_vaccine_values').size().reset_index(name='count')

fix = make_subplots(rows=2, cols=2, subplot_titles=("2020", "2021", "2022", "2023"))
fix.add_trace(go.Scatter(x=df2020['max_similarity_caption_vaccine_values'], y=df2020['count'],mode='lines+markers', name='2020'),row=1, col=1)
fix.add_trace(go.Scatter(x=df2021['max_similarity_caption_vaccine_values'], y=df2021['count'], mode='lines+markers', name='2021'),row=1, col=2)
fix.add_trace(go.Scatter(x=df2022['max_similarity_caption_vaccine_values'], y=df2022['count'], mode='lines+markers', name='2022'),row=2, col=1)
fix.add_trace(go.Scatter(x=df2023['max_similarity_caption_vaccine_values'], y=df2023['count'], mode='lines+markers', name='2023'),row=2, col=2)


fix.update_layout(
    title= "Similarity with caption and hashtag #pandemic",
    xaxis_title="Similarity",
    yaxis_title="Count",

    legend=dict(
        title="YEAR",
        traceorder='normal',
        tracegroupgap=20,
        itemsizing='trace',
        itemwidth=80,
        font=dict(
            family="sans-serif",
            size=12,
            color="black"
        ),
        bordercolor="Black",
      )
)

fix.show()

threshold = 0.5
b = sum(df2021['count'][df2021['max_similarity_caption_vaccine_values']>threshold])/sum(df2021['count'])
c = sum(df2022['count'][df2022['max_similarity_caption_vaccine_values']>threshold])/sum(df2022['count'])
d = sum(df2023['count'][df2023['max_similarity_caption_vaccine_values']>threshold])/sum(df2023['count'])
list1 = [a, b, c, d]

plt.bar(['2020', '2021', '2022', '2023'], list1)

# Đặt tiêu đề và nhãn trục
plt.title('Phần trăm các bài viết có độ tương đồng lớn hơn 0.5')
plt.xlabel('Năm')
plt.ylabel('%')

# Hiển thị biểu đồ
plt.show()

def average_caption():

    # Tạo các danh sách để lưu thông tin về hashtag có similarity lớn nhất
    similarity_average = []
    similarity_average2 = []

    # Lặp qua mỗi dòng trong DataFrame
    for index, row in df.iterrows():

        caption = row['caption']
        vaccine = glove_vectors["pandemic"]

        # Tách các hashtag ra thành danh sách
        caption = str(caption)
        caption_list = caption.split()

        average = 0.0
        average2 = 0.0
        total_similarity = 0.0
        total_similarity2 = 0.0
        i = 0
        m = 0

        # Lặp qua từng hashtag và tính toán độ tương đồng
        for caption in caption_list:
            if(caption in glove_vectors):
                i = i + 1
                text = glove_vectors[caption]
                similarity = glove_vectors.cosine_similarities(text, [vaccine])[0]
                if similarity < 0:
                  similarity = 0
                total_similarity = total_similarity + similarity

        if i==0:
          average = 0
        else:
          average = total_similarity / i
          average = round(average, 2)
        # Lưu hashtag có độ tương đồng lớn nhất và giá trị tương đồng
        similarity_average.append(average)
# Thêm cột mới vào DataFrame chứa thông tin về hashtag có độ tương đồng lớn nhất và giá trị tương đồng
    df['average_caption'] = similarity_average
    return df

average_caption()

df2020 = df[df['year'] == 2020]
df2020 = df2020.groupby('average_caption').size().reset_index(name='count')

df2021 = df[df['year'] == 2021]
df2021 = df2021.groupby('average_caption').size().reset_index(name='count')

df2022 = df[df['year'] == 2022]
df2022 = df2022.groupby('average_caption').size().reset_index(name='count')

df2023 = df[df['year'] == 2023]
df2023 = df2023.groupby('average_caption').size().reset_index(name='count')

fix = make_subplots(rows=2, cols=2, subplot_titles=("2020", "2021", "2022", "2023"))
fix.add_trace(go.Scatter(x=df2020['average_caption'], y=df2020['count'],mode='lines+markers', name='2020'),row=1, col=1)
fix.add_trace(go.Scatter(x=df2021['average_caption'], y=df2021['count'], mode='lines+markers', name='2021'),row=1, col=2)
fix.add_trace(go.Scatter(x=df2022['average_caption'], y=df2022['count'], mode='lines+markers', name='2022'),row=2, col=1)
fix.add_trace(go.Scatter(x=df2023['average_caption'], y=df2023['count'], mode='lines+markers', name='2023'),row=2, col=2)


fix.update_layout(
    title= "Count average similarity between caption with hashtag #pandemic",
    xaxis_title="Similarity",
    yaxis_title="Count",

    legend=dict(
        title="YEAR",
        traceorder='normal',
        tracegroupgap=20,
        itemsizing='trace',
        itemwidth=80,
        font=dict(
            family="sans-serif",
            size=12,
            color="black"
        ),
        bordercolor="Black",
      )
)

fix.show()

threshold = 0.7
a = sum(df2020['count'][df2020['average_caption']>threshold])/sum(df2020['count'])
b = sum(df2021['count'][df2021['average_caption']>threshold])/sum(df2021['count'])
c = sum(df2022['count'][df2022['average_caption']>threshold])/sum(df2022['count'])
d = sum(df2023['count'][df2023['average_caption']>threshold])/sum(df2023['count'])
list1 = [a, b, c, d]

plt.bar(['2020', '2021', '2022', '2023'], list1)

# Đặt tiêu đề và nhãn trục
plt.title('Phần trăm các bài viết có độ tương đồng lớn hơn 0.7')
plt.xlabel('Năm')
plt.ylabel('%')

# Hiển thị biểu đồ
plt.show()

"""#in

"""

df = pd.read_csv('/content/drive/MyDrive/data/caption.csv')
new_columns = ['shortCode','year', 'caption', 'hashtags']
df = df[new_columns]

df2020 = df[df['year'] == 2020]
df2021 = df[df['year'] == 2021]
df2022 = df[df['year'] == 2022]
df2023 = df[df['year'] == 2023]

def co_hashtag(df):
  a=[]
  b = len(df)
  coronavirus = 0
  isolation = 0
  vaccine = 0
  lockdown = 0
  virus = 0
  pandemic = 0
  for row in df.caption:
    row = str(row)
    if "coronavirus" in row:
      coronavirus += 1
    if "isolation" in row:
      isolation += 1
    if "vaccine" in row:
      vaccine += 1
    if "lockdown" in row:
      lockdown += 1
    if "virus" in row:
      virus += 1
    if "pandemic" in row:
      pandemic += 1
  a.append(round(coronavirus/b, 2))
  a.append(round(isolation/b, 2))
  a.append(round(vaccine/b, 2))
  a.append(round(lockdown/b, 2))
  a.append(round(virus/b, 2))
  a.append(round(pandemic/b, 2))
  return a

a = co_hashtag(df2023)

plt.bar(['#coronavirus', '#isolation', '#vaccine', '#lockdown', '#virus', '#pandemic'], a)

# Đặt tiêu đề và nhãn trục
plt.title('Tỉ lệ caption chứa hashtag năm 2023')
plt.xlabel('Hashtag')
plt.ylabel('%')

# Hiển thị biểu đồ
plt.show()